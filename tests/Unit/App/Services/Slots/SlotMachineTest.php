<?php

namespace Unit\App\Services\Slots;

use App\Services\Slots\Payline;
use App\Services\Slots\SlotMachine;
use App\Services\Slots\SlotsGenerator;

class SlotMachineTest extends \TestCase
{
    /**
     * @var
     */
    private $betAmount;

    /**
     * @var Payline
     */
    private $payline;

    /**
     * @var SlotMachine
     */
    private $slotMachine;

    /**
     * Predefined paylines for testing.
     *
     * @var array
     */
    private $paylines = [
        [0, 3, 6, 9, 12],
        [1, 4, 7, 10, 13],
        [2, 5, 8, 11, 14],
        [0, 4, 8, 10, 12],
        [2, 4, 6, 10, 14]
    ];

    /**
     * Setup board and payline for testing functions
     *
     * @throws \Exception
     */
    function setUp(): void
    {
        $this->betAmount = 1;
        $board = SlotsGenerator::playWithDefinedSlots([
            "J", "Cat", "Blir", "J", "J", "Bir", "J", "Q", "J", "Q", "Mon", "Q", "K", "Bir", "A"
        ]);

        $this->payline = (new Payline(5))->forcePaylines($this->paylines);
        $this->slotMachine = new SlotMachine($board, $this->payline, $this->betAmount);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * Test to check wining paylines are as expected
     */
    function testWinningLines(): void
    {
        $result = $this->slotMachine->getWinningLines();

        $this->assertEquals([0 => 3, 3 => 3], $result, 'Asserting that row 0 and 3 are winning paylines with 3 consecutive items in both row.');
    }

    /**
     * Test to check wining amount is calculated accurately
     */
    function testWinningAmount(): void
    {
        $result = $this->slotMachine->getWinningAmount();

        $this->assertEquals(40, $result, 'Asserting that total wining amount is 40.');
    }

    /**
     * Test to check if wining payline are formatted as needed
     */
    function testFormattedWinningLines(): void
    {
        $result = $this->slotMachine->getFormattedWiningLines();;

        $this->assertEquals([
            ["0, 3, 6, 9, 12" => 3],
            ["0, 4, 8, 10, 12" => 3]
        ], $result, 'Asserting that formatted payline has key as row 0 and 3 and values as 3.');
    }

    /**
     * Test to check if bet amount is set correctly.
     */
    function testBetAmount(): void
    {

        $this->assertEquals($this->betAmount * 100, $this->slotMachine->getBetAmount(), 'Asserting bet amount is correct (x100) on slot machine.');

    }

    /**
     * Test if 4 consecutive items in a payline are identified correctly and correct wining amount is assigned.
     *
     * @throws \App\Exceptions\BoardSlotsException
     */
    function testWith4ConsecutiveItems(): void
    {
        $board = SlotsGenerator::playWithDefinedSlots([
            "A", "Cat", "Blir", "J", "J", "Blir", "J", "Q", "Blir", "Q", "Mon", "Blir", "K", "Bir", "A"
        ]);

        $slotMachine = new SlotMachine($board, $this->payline, $this->betAmount);

        $this->assertEquals([2 => 4], $slotMachine->getWinningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals([["2, 5, 8, 11, 14" => 4]], $slotMachine->getFormattedWiningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals($this->betAmount * 200, $slotMachine->getWinningAmount(), 'Asserting that total wining amount is 200.');
    }

    /**
     * Test if 5 consecutive items in a payline are identified correctly and correct wining amount is assigned.
     *
     * @throws \App\Exceptions\BoardSlotsException
     */
    function testWith5ConsecutiveItems(): void
    {
        $board = SlotsGenerator::playWithDefinedSlots([
            "A", "Cat", "Blir", "J", "J", "Blir", "J", "Q", "Blir", "Q", "Mon", "Blir", "K", "Mon", "Blir"
        ]);

        $slotMachine = new SlotMachine($board, $this->payline, $this->betAmount);

        $this->assertEquals([2 => 5], $slotMachine->getWinningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals([["2, 5, 8, 11, 14" => 5]], $slotMachine->getFormattedWiningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals($this->betAmount * 1000, $slotMachine->getWinningAmount(), 'Asserting that total wining amount is 1000% of bet amount.');
    }

    /**
     * Test if 5 consecutive items in multiple paylines are identified correctly and correct wining amount is assigned.
     *
     * @throws \App\Exceptions\BoardSlotsException
     */
    function testWith5ConsecutiveAndMultipleItems(): void
    {
        $board = SlotsGenerator::playWithDefinedSlots([
            "J", "J", "J", "J", "J", "J", "J", "J", "J", "J", "J", "J", "J", "J", "J"
        ]);

        $slotMachine = new SlotMachine($board, $this->payline, $this->betAmount);

        $this->assertEquals([0 => 5, 1 => 5, 2 => 5, 3 => 5, 4 => 5], $slotMachine->getWinningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals([
            ["0, 3, 6, 9, 12" => 5],
            ["1, 4, 7, 10, 13" => 5],
            ["2, 5, 8, 11, 14" => 5],
            ["0, 4, 8, 10, 12" => 5],
            ["2, 4, 6, 10, 14" => 5]
        ], $slotMachine->getFormattedWiningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals($this->betAmount * 5000, $slotMachine->getWinningAmount(), 'Asserting that total wining amount is 1000% of bet amount.');
    }

    /**
     * @throws \App\Exceptions\BoardSlotsException
     */
    function testNoWinning(): void
    {
        $board = SlotsGenerator::playWithDefinedSlots([
            "X", "A", "J", "J", "Y", "Y", "H", "Z", "A", "B", "C", "D", "E", "F", "G"
        ]);

        $slotMachine = new SlotMachine($board, $this->payline, $this->betAmount);

        $this->assertEquals([], $slotMachine->getWinningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals([], $slotMachine->getFormattedWiningLines(), 'Asserting 3rd index is winning line.');
        $this->assertEquals($this->betAmount * 0, $slotMachine->getWinningAmount(), 'Asserting that total wining amount is 1000% of bet amount.');
    }
}
